1. Write a program to display how this keyword can be used as a return type and this
as an argument.
'this' keyword as an return type.
public Student carDetails(){
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter the name of the car: ");
      String name = sc.nextLine();
      System.out.println("Enter the model of the car: ");
      String name = sc.nextLine();
      this.model = model;
      this.name = name;
      return this;
   }
   
'this' keyword as an argument
import java.util.Scanner;
public class Main
{
    public static void main(String[] args) 
    {
    	S2 s1 = new S2();  
  	  s1.p(); 
    }
    }
    
class S2{  
	  void m(S2 m){  
	  System.out.println("invoked");  
	  }  
	  void p(){  
	  m(this);  
	  }  
	  }
2. Write a program to display how this keyword and object of a class point to the
same memory location.
class A {
	int value;

	void setValue(int value) {
		this.value = value;
	}

	void compareMemoryLocation(A other) {
		System.out.println("This other" + (this == other));
	}
}

public class Main {
	public static void main(String[] args) {
		A a = new A();
		a.setValue(10);
		A b = a;
		a.compareMemoryLocation(a);
	}
}

3. List the type of variables supported in java.
There are 3 types of variables in java:
1) Local Variable
A variable declared inside the body of the method is called local variable and it can only be accessed
inside the method body. We can use this variable only
within that method.

2) Instance Variable
A variable declared inside the class but outside the body of the method, is called an instance variable.
It is not declared as static and it can be accessed with the direct reference of the class.
It is called an instance variable because it is not shared among instances.

3) Static variable
A variable that is declared as static is called a static variable. It cannot be local. You can create a
single copy of the static variable and share it among all the instances of the class. Memory allocation
for static variables happens only once when the class is loaded in the memory and no new mempry can be
initialized to the static variables.

4. Define constructors and their usage with example.
A constructor in Java is invoked when an object of the class is created.
It basically replicates the real world entities of the features of the class.
For Example, in the following example the constructor of the class "Car" is created and called.

public class Main
{
    public static void main(String[] args) 
    {
    	car c = new car(2022, "black", 7000);
    	c.details();
    }
    }
    
    class car{
		int model;
		String color;
		double price;
		car(int model, String color, double price){ 			//constructor called
			this.model=model;
			this.color=color;
			this.price=price;
		}
		
		void details() {
			System.out.println(model+" "+" "+color+" "+" "+price);
		}
}
5. Display with an example in which order the static content(static
methods,blocks,main method,non static methods,class level blocks etc) executes.
class Main {
  
    // static block
    static
    {
        System.out.println("Inside Static Block.");
    }
  
    // main method
    public static void main(String args[])
    {
        System.out.println("Inside main method.");
        A a = new A();
        a.print();
    }
    
    static
    {
        System.out.println("Static inside main method.");
    }
}

class A{
    void print() {
    	System.out.println("Non static class level method");
    }
    }

6. Write a program to check whether year is a leap year or not using conditional
operator.
import java.util.*;
public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter Year to check: ");
		int year = sc.nextInt();
		
		if(year%4==0) {
			System.out.println(year+" is a leap year");
		}else {
			System.out.println(year+" is not leap year");
		}
		

	}
}

7. Write a program to check whether character is an alphabet or not using
conditional operator.
import java.util.*;
public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("---Alphabet Checker---");
		System.out.println("Enter any Character");
		char c = sc.next().charAt(0);

		if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
			System.out.println("It's an Alphabet");
		}

		else {
			System.out.println("That is not an Alphabet");
		}

	}
}

	
8. Write a program to enter P, T, R and calculate Compound Interest.
import java.util.*;
public class Main {
	public static void main(String[] args) {

		double p, rate, time, ci;
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter Principle: ");
		p = sc.nextInt();

		System.out.print("Enter Interest rate : ");
		rate = sc.nextInt();

		System.out.print("Enter a Time period in years : ");
		time = sc.nextInt();

		ci = p * (Math.pow((1 + rate / 100), time)) - p;

		double amount = p + ci;
		System.out.println("The total amount recieved is: " + amount);
		System.out.println("compound Interest earned is : " + ci);
	}
}

9. Write a program to find maximum between three numbers.
import java.util.Scanner;
public class Main{
    public static void main(String[]args){
        
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Enter First Number: ");
        int a=sc.nextInt();
        System.out.println("Enter Second Number: ");
        int b=sc.nextInt();
        System.out.println("Enter Third Number: ");
        
        int c=sc.nextInt();
    
        int large=0;
        
        //checking if a is larger than b and c
        if(a>b&&a>c){
            large=large+a;
        }
        //checking if b is larger than a and c
        if(b>a&&b>c){
            large=large+b;
        }
        //checking if c is larger than a and b
        if(c>a&&c>b){
            large=large+c;
        }
        System.out.println("Largest number is: "+large);
        }
    }
	
10.Write a program to check whether a character is uppercase or lowercase alphabet.
import java.util.*;
public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.println("---Letter Case Checker---");
		System.out.println("Enter any Character");
		char c = sc.next().charAt(0);
		
		if(c>='A' && c<='Z') {
			System.out.println("It's an Captial Alphabet");
		}
		else if(c>='a' && c<='z') {
			System.out.println("It's an small case alphabet");
		}else {
			System.out.println("That is not an Alphabet");
		}

		  
		  }   
	}
11.Write a program to find all roots of a quadratic equation.
import java.util.Scanner;



public class Main {

  public static void main(String[] args) {

    Scanner sc = new Scanner(System.in);

    System.out.print("Enter coefficients a, b, and c: ");

    double a = sc.nextDouble();

    double b = sc.nextDouble();

    double c = sc.nextDouble();



    double root1, root2;

    double disc = b * b - 4 * a * c;

    if (disc > 0) {

      root1 = (-b + Math.sqrt(disc)) / (2 * a);

      root2 = (-b - Math.sqrt(disc)) / (2 * a);

      System.out.println("Roots are real and different.");

      System.out.println("First root: " + root1);

      System.out.println("Second root: " + root2);

    } else if (disc == 0) {

      root1 = root2 = -b / (2 * a);

      System.out.println("Roots are real and same.");

      System.out.println("Root: " + root1);

    } else {

      double realPart = -b / (2 * a);

      double imaginaryPart = Math.sqrt(-disc) / (2 * a);

      System.out.println("Roots are complex and different.");

      System.out.println("First root: " + realPart + "+" + imaginaryPart + "i");

      System.out.println("Second root: " + realPart + "-" + imaginaryPart + "i");

    }

  }

}

12.Write a program to enter any number and print its prime factors.
import java.util.Scanner;

class Main {
	public static void main(String[] args) {

		int n,i;
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter a number: ");
		n = sc.nextInt();

		for (i = 2; i < n; i++) {
			while (n % i == 0) {
				System.out.print(i + " ");
				n = n / i;
			}
		}

		if (n == 0)
			System.out.println("Invalid Input");
		if (n >= 2) {
			System.out.print(n+" are the prime factors");
		}
		
	}
}
13.Write a program to print all Armstrong numbers between 1 to n.
import java.util.Scanner;

class Main {
	public static void main(String[] args) {

		int a, b;
	      Scanner sc = new Scanner(System.in);
	      System.out.println("Enter the first number: ");
	      a = sc.nextInt();
	      System.out.println("Enter the second number: ");
	      b = sc.nextInt();
	      System.out.println(" ");

	      for (int i = a; i<b; i++){
	         int check, rem;
	         int sum = 0;
	         check = i;
	         while(check != 0) {
	            rem = check % 10;
	            sum = sum + (rem * rem * rem);
	            check = check / 10;
	         }
	         if(sum == i){
	            System.out.println(""+"Armstrong number: "+i);
	         }
	      }
		
	}
}
14.Write a program to convert Hexadecimal to Decimal number system.
Ques 14. Write a Program to convert hexadecimal to decimal
import java.util.Scanner;
class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter Hexadecimal Number (for eg. 1088B)");
		String s= sc.nextLine();

		int x = Integer.parseInt(s, 16);

		System.out.println("Decimal value "+"of '"+s+ "' is : " + x);

	}
}
15.Write a program to find HCF (GCD) & LCM of two numbers.
import java.util.Scanner;

class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter First Number: ");
		int n1 = sc.nextInt();

		System.out.println("Enter Second Number: ");
		int n2 = sc.nextInt();

		int lcm = 0;
		int hcf = 0;

		if (n1 > n2) {
			lcm = n1;
		} else if (n1 < n2) {
			lcm = n2;
		}

		while (true) {
			if (lcm % n1 == 0 && lcm % n2 == 0) {
				System.out.println("LCM of " + n1 + " and " + n2 + " is: " + lcm);
				break;
			}
			++lcm;
		}

		for (int i = 1; i <= n1 || i <= n2; i++) {
			if (n1 % i == 0 && n2 % i == 0)
				hcf = i;
		}
		System.out.println("HCF of " + n1 + " and " + n2 + " is: " + hcf);
	}
}
16.Write a program to find roots of a quadratic equation using switch case.
public class Main {

  public static void main(String[] args) {

    Scanner sc = new Scanner(System.in);

    System.out.print("Enter coefficients a, b, and c: ");

    double a = sc.nextDouble();

    double b = sc.nextDouble();

    double c = sc.nextDouble();



    double root1, root2;

    double disc = b * b - 4 * a * c;

    if (disc > 0) {

      root1 = (-b + Math.sqrt(disc)) / (2 * a);

      root2 = (-b - Math.sqrt(disc)) / (2 * a);

      System.out.println("Roots are real and different.");

      System.out.println("First root: " + root1);

      System.out.println("Second root: " + root2);

    } else if (disc == 0) {

      root1 = root2 = -b / (2 * a);

      System.out.println("Roots are real and same.");

      System.out.println("Root: " + root1);

    } else {

      double realPart = -b / (2 * a);

      double imaginaryPart = Math.sqrt(-disc) / (2 * a);

      System.out.println("Roots are complex and different.");

      System.out.println("First root: " + realPart + "+" + imaginaryPart + "i");

      System.out.println("Second root: " + realPart + "-" + imaginaryPart + "i");

    }

  }

}

17.Write a program to copy all elements from an array to another array.
import java.util.*;
public class Main {
	public static void main(String[] args) {
		
		
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter Size of Original Array: ");
		int n = sc.nextInt();
		
		int [] arr = new int[n] ;
		int [] arrNew = new int[arr.length];
		
		System.out.print("Enter "+n+" Elements of Original Array: ");
		
		for (int i = 0; i < arr.length; i++) {
			arr[i]=sc.nextInt();
		}
		
		for (int i = 0; i < arrNew.length; i++) {
			arrNew[i] = arr[i];
		}

		System.out.print("Original array: ");
		for (int i = 0; i < arrNew.length; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println(" ");
		System.out.println("Copying Elements... ");

		System.out.print("New Array: ");
		for (int i = 0; i < arrNew.length; i++) {
			System.out.print(arrNew[i]+" ");
		}

	}
}

18.Write a program to delete an element from an array at specified position.
import java.util.*;
public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter Size of Array: ");
		int n = sc.nextInt();
		
		int arr[] = new int[n];
		
		int index;
		int size = arr.length;
		
		System.out.println("Enter "+n+" Element:  ");
		for (int i = 0; i < arr.length; i++) {
			arr[i] = sc.nextInt();
		}

		System.out.println("Enter Index of Element to be Deleted");
		index = sc.nextInt();

		
		for (int i = index; i < size - 1; i++) {
			arr[i] = arr[i + 1];
		}
		size--;

		System.out.println("New Array: ");
		for (int i = 0; i < arr.length-1; i++) {
			System.out.print(arr[i] + " ");
		}
	}
}

19.Write a program to delete all duplicate elements from an array.
import java.util.*;  
public class Main {  
    public static void main(String[] args) {  
      Scanner sc = new Scanner(System.in);
      
      System.out.print("Enter the size of array: ");
      int n = sc.nextInt();
      
      int arr[] = new int[n];
      int ar[] = new int[100];
      
      
      Arrays.fill(ar,0);
      System.out.print("Enter " +n+ " array elements: ");
      for(int i=0; i<n; i++) {
         arr[i] = sc.nextInt();
     }
      System.out.println("removing duplicate elements...");
     System.out.println("New Array after duplicate elements are removed: ");
      for(int i=0;i<n;i++){
        ar[arr[i]]++;
        if(ar[arr[i]]==1){
            System.out.print(arr[i]+" ");
        }
    }
 }
}  

Ques 20. Write a program to put even and odd elements of an array into two different arrays
import java.util.Scanner;
public class Main
{
    public static void main(String[] args) 
    {
        int n, j = 0, k = 0;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter Size of Array: ");
        n = s.nextInt();
        
        int a[] = new int[n];
        int odd[] = new int[n];
        int even[] = new int[n];
        
        System.out.println("Enter Array elements:");
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
        }
        
        for(int i = 0; i < n; i++)
        {
            if(a[i] % 2 != 0)
            {
                odd[j] = a[i];
                j++;
            }
            else
            {
                even[k] = a[i];
                k++;
            }
        }
        
        System.out.print("Array of odd numbers: ");
        if(j > 1)
        {
            for(int i = 0;i < (j-1); i++)
            {
                System.out.print(odd[i]+",");
            }
            System.out.print(odd[j-1]);
        }
        else
        {
            System.out.println("No number");
        }
        
        System.out.println("");
        System.out.print("Array of Even Numbers: ");
        if(k > 1)
        {
            for(int i = 0; i < (k-1); i++)
            {
                System.out.print(even[i]+",");
            }
        System.out.print(even[k-1]);
        }
        else
        {
            System.out.println("No number");
        }
    }
}
